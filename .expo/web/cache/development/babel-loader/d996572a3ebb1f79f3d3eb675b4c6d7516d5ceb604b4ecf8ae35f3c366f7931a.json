{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UnavailabilityError } from 'expo-modules-core';\nimport Sharing from \"./ExpoSharing\";\nexport function isAvailableAsync() {\n  return _regeneratorRuntime.async(function isAvailableAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!Sharing) {\n            _context.next = 6;\n            break;\n          }\n          if (!Sharing.isAvailableAsync) {\n            _context.next = 5;\n            break;\n          }\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(Sharing.isAvailableAsync());\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n        case 5:\n          return _context.abrupt(\"return\", true);\n        case 6:\n          return _context.abrupt(\"return\", false);\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function shareAsync(url) {\n  var options,\n    _args2 = arguments;\n  return _regeneratorRuntime.async(function shareAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n          if (!(!Sharing || !Sharing.shareAsync)) {\n            _context2.next = 3;\n            break;\n          }\n          throw new UnavailabilityError('Sharing', 'shareAsync');\n        case 3:\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(Sharing.shareAsync(url, options));\n        case 5:\n          return _context2.abrupt(\"return\", _context2.sent);\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"names":["UnavailabilityError","Sharing","isAvailableAsync","_regeneratorRuntime","async","isAvailableAsync$","_context","prev","next","awrap","abrupt","sent","stop","Promise","shareAsync","url","options","_args2","arguments","shareAsync$","_context2","length","undefined"],"sources":["D:\\programming\\apper\\camera-app\\node_modules\\expo-sharing\\src\\Sharing.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport Sharing from './ExpoSharing';\n\n// @needsAudit\nexport type SharingOptions = {\n  /**\n   * Sets `mimeType` for `Intent` *(Android only)*\n   */\n  mimeType?: string;\n  /**\n   * ([Uniform Type Identifier](https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/understanding_utis/understand_utis_conc/understand_utis_conc.html))\n   * the type of the target file *(iOS only)*\n   */\n  UTI?: string;\n  /**\n   * Sets share dialog title *(Android and Web only)*\n   */\n  dialogTitle?: string;\n};\n\n// @needsAudit\n/**\n * Determine if the sharing API can be used in this app.\n * @return A promise that fulfills with `true` if the sharing API can be used, and `false` otherwise.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  if (Sharing) {\n    if (Sharing.isAvailableAsync) {\n      return await Sharing.isAvailableAsync();\n    }\n    return true;\n  }\n\n  return false;\n}\n\n// @needsAudit\n/**\n * Opens action sheet to share file to different applications which can handle this type of file.\n * @param url Local file URL to share.\n * @param options A map of share options.\n */\nexport async function shareAsync(url: string, options: SharingOptions = {}): Promise<object> {\n  if (!Sharing || !Sharing.shareAsync) {\n    throw new UnavailabilityError('Sharing', 'shareAsync');\n  }\n  return await Sharing.shareAsync(url, options);\n}\n"],"mappings":";AAAA,SAASA,mBAAmB,QAAQ,mBAAmB;AAEvD,OAAOC,OAAO;AAwBd,OAAO,SAAeC,gBAAgBA,CAAA;EAAA,OAAAC,mBAAA,CAAAC,KAAA,UAAAC,kBAAAC,QAAA;IAAA;MAAA,QAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAAA,KAChCP,OAAO;YAAAK,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,KACLP,OAAO,CAACC,gBAAgB;YAAAI,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAAF,QAAA,CAAAE,IAAA;UAAA,OAAAL,mBAAA,CAAAM,KAAA,CACbR,OAAO,CAACC,gBAAgB,EAAE;QAAA;UAAA,OAAAI,QAAA,CAAAI,MAAA,WAAAJ,QAAA,CAAAK,IAAA;QAAA;UAAA,OAAAL,QAAA,CAAAI,MAAA,WAElC,IAAI;QAAA;UAAA,OAAAJ,QAAA,CAAAI,MAAA,WAGN,KAAK;QAAA;QAAA;UAAA,OAAAJ,QAAA,CAAAM,IAAA;MAAA;IAAA;EAAA,qBAAAC,OAAA;AAAA;AASd,OAAO,SAAeC,UAAUA,CAACC,GAAW;EAAA,IAAAC,OAAA;IAAAC,MAAA,GAAAC,SAAA;EAAA,OAAAf,mBAAA,CAAAC,KAAA,UAAAe,YAAAC,SAAA;IAAA;MAAA,QAAAA,SAAA,CAAAb,IAAA,GAAAa,SAAA,CAAAZ,IAAA;QAAA;UAAEQ,OAAA,GAAAC,MAAA,CAAAI,MAAA,QAAAJ,MAAA,QAAAK,SAAA,GAAAL,MAAA,MAA0B,EAAE;UAAA,MACpE,CAAChB,OAAO,IAAI,CAACA,OAAO,CAACa,UAAU;YAAAM,SAAA,CAAAZ,IAAA;YAAA;UAAA;UAAA,MAC3B,IAAIR,mBAAmB,CAAC,SAAS,EAAE,YAAY,CAAC;QAAA;UAAAoB,SAAA,CAAAZ,IAAA;UAAA,OAAAL,mBAAA,CAAAM,KAAA,CAE3CR,OAAO,CAACa,UAAU,CAACC,GAAG,EAAEC,OAAO,CAAC;QAAA;UAAA,OAAAI,SAAA,CAAAV,MAAA,WAAAU,SAAA,CAAAT,IAAA;QAAA;QAAA;UAAA,OAAAS,SAAA,CAAAR,IAAA;MAAA;IAAA;EAAA,qBAAAC,OAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}