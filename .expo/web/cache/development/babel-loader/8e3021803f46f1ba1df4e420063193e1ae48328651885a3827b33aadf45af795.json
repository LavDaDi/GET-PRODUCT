{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { UnavailabilityError } from 'expo-modules-core';\nimport Sharing from './ExpoSharing';\nexport function isAvailableAsync() {\n  return _isAvailableAsync.apply(this, arguments);\n}\nfunction _isAvailableAsync() {\n  _isAvailableAsync = _asyncToGenerator(function* () {\n    if (Sharing) {\n      if (Sharing.isAvailableAsync) {\n        return yield Sharing.isAvailableAsync();\n      }\n      return true;\n    }\n    return false;\n  });\n  return _isAvailableAsync.apply(this, arguments);\n}\nexport function shareAsync(_x) {\n  return _shareAsync.apply(this, arguments);\n}\nfunction _shareAsync() {\n  _shareAsync = _asyncToGenerator(function* (url) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!Sharing || !Sharing.shareAsync) {\n      throw new UnavailabilityError('Sharing', 'shareAsync');\n    }\n    return yield Sharing.shareAsync(url, options);\n  });\n  return _shareAsync.apply(this, arguments);\n}","map":{"version":3,"names":["UnavailabilityError","Sharing","isAvailableAsync","_isAvailableAsync","apply","arguments","_asyncToGenerator","shareAsync","_x","_shareAsync","url","options","length","undefined"],"sources":["D:\\programming\\apper\\camera-app\\node_modules\\expo-sharing\\src\\Sharing.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport Sharing from './ExpoSharing';\n\n// @needsAudit\nexport type SharingOptions = {\n  /**\n   * Sets `mimeType` for `Intent`.\n   * @platform android\n   */\n  mimeType?: string;\n  /**\n   * [Uniform Type Identifier](https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/understanding_utis/understand_utis_conc/understand_utis_conc.html)\n   *  - the type of the target file.\n   * @platform ios\n   */\n  UTI?: string;\n  /**\n   * Sets share dialog title.\n   * @platform android\n   * @platform web\n   */\n  dialogTitle?: string;\n};\n\n// @needsAudit\n/**\n * Determine if the sharing API can be used in this app.\n * @return A promise that fulfills with `true` if the sharing API can be used, and `false` otherwise.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  if (Sharing) {\n    if (Sharing.isAvailableAsync) {\n      return await Sharing.isAvailableAsync();\n    }\n    return true;\n  }\n\n  return false;\n}\n\n// @needsAudit\n/**\n * Opens action sheet to share file to different applications which can handle this type of file.\n * @param url Local file URL to share.\n * @param options A map of share options.\n */\nexport async function shareAsync(url: string, options: SharingOptions = {}): Promise<void> {\n  if (!Sharing || !Sharing.shareAsync) {\n    throw new UnavailabilityError('Sharing', 'shareAsync');\n  }\n  return await Sharing.shareAsync(url, options);\n}\n"],"mappings":";AAAA,SAASA,mBAAmB,QAAQ,mBAAmB;AAEvD,OAAOC,OAAO,MAAM,eAAe;AA4BnC,gBAAsBC,gBAAgBA,CAAA;EAAA,OAAAC,iBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AASrC,SAAAF,kBAAA;EAAAA,iBAAA,GAAAG,iBAAA,CATM,aAA+B;IACpC,IAAIL,OAAO,EAAE;MACX,IAAIA,OAAO,CAACC,gBAAgB,EAAE;QAC5B,aAAaD,OAAO,CAACC,gBAAgB,EAAE;;MAEzC,OAAO,IAAI;;IAGb,OAAO,KAAK;EACd,CAAC;EAAA,OAAAC,iBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAQD,gBAAsBE,UAAUA,CAAAC,EAAA;EAAA,OAAAC,WAAA,CAAAL,KAAA,OAAAC,SAAA;AAAA;AAK/B,SAAAI,YAAA;EAAAA,WAAA,GAAAH,iBAAA,CALM,WAA0BI,GAAW,EAA8B;IAAA,IAA5BC,OAAA,GAAAN,SAAA,CAAAO,MAAA,QAAAP,SAAA,QAAAQ,SAAA,GAAAR,SAAA,MAA0B,EAAE;IACxE,IAAI,CAACJ,OAAO,IAAI,CAACA,OAAO,CAACM,UAAU,EAAE;MACnC,MAAM,IAAIP,mBAAmB,CAAC,SAAS,EAAE,YAAY,CAAC;;IAExD,aAAaC,OAAO,CAACM,UAAU,CAACG,GAAG,EAAEC,OAAO,CAAC;EAC/C,CAAC;EAAA,OAAAF,WAAA,CAAAL,KAAA,OAAAC,SAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}